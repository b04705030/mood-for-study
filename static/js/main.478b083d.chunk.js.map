{"version":3,"sources":["videos.js","components/Overlay.js","components/Navbar.js","App.js","index.js"],"names":["VIDEO_IDS","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","opacity","position","top","bottom","left","right","gridList","width","height","paddingTop","icon","color","subHeader","textAlign","fontSize","fontFamily","cursive","pointerEvents","videoTile","cursor","Overlay","hideOverlay","switchChannel","classes","vidNames","Object","keys","className","onClick","GridList","cellHeight","cols","GridListTile","style","ListSubheader","component","currentHour","Date","getHours","getPeriodOfDay","map","vidName","event","_","handleTileClick","src","videoName","alt","GridListTileBar","title","appBar","zIndex","appTitle","Navbar","showOverlay","AppBar","Toolbar","Button","app","container","margin","padding","spacing","paddingBottom","appBarSpacer","mixins","toolbar","videoPlayer","App","useState","overlay","setOverlay","video","setVideo","vidSrc","val","name","Container","frameBorder","allow","allowFullScreen","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.478b083d.chunk.js","sourcesContent":["export const VIDEO_IDS = {\n    'lofi-girl': '5qap5aO4i9A',\n    'tokyo-cafe': '6uddGul0oAc',\n    'fireplace-thunderstorm': '3sL0omwElxw',\n    'forest': 'xNN7iTA57jM',\n    'space': 'qt_urUz42vI'\n    // 'ocean': 'jZkOR1LF-9I'\n};\n\nexport const getVideoThumbnailSrc = (videoName) => {\n    return `https://img.youtube.com/vi/${VIDEO_IDS[videoName]}/hqdefault.jpg`;\n}; // mqdefault: 320px, hqdefault: 480px, sddefault: 640px\n\nexport const getVideoSrc = (videoName) => {\n    return `https://www.youtube.com/embed/${VIDEO_IDS[videoName]}?controls=1&autoplay=1&disablekb=0&modestbranding=1&rel=0&loop=1`;\n};","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\n// import IconButton from '@material-ui/core/IconButton';\n\nimport { VIDEO_IDS, getVideoThumbnailSrc } from '../videos';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: 'black',\n    opacity: 0.9,\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  },\n  gridList: {\n    width: '80vw',\n    height: '80vh',\n    paddingTop: '10vh'\n  },\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)',\n  },\n  subHeader: {\n      textAlign: 'center',\n      color: 'white',\n      fontSize: '2em',\n      fontFamily: 'Codystar',\n      cursive: true,\n      pointerEvents: 'none'\n  },\n  videoTile: {\n    '&:hover': {\n        cursor: 'pointer'\n    }\n  }\n}));\n\nexport default function Overlay({ hideOverlay, switchChannel }) {\n  const classes = useStyles();\n  const vidNames = Object.keys(VIDEO_IDS);\n\n  const getPeriodOfDay = () => {\n    const currentDate = new Date();\n    const currentHour = currentDate.getHours();\n    if (currentHour >= 4 && currentHour < 12) { return \"morning\"; }\n    else if (currentHour >= 12 && currentHour < 18) { return \"afternoon\"; }\n    else { return \"night\"; }\n  }\n\n  const handleTileClick = (_, vidName) => {\n    switchChannel(vidName);\n    hideOverlay();\n  };\n\n  return (\n    <div className={classes.root} onClick={hideOverlay}>\n      <GridList cellHeight={180} className={classes.gridList} cols={2}>\n        <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\n          <ListSubheader className={classes.subHeader} component=\"div\">\n            Set the mood for the {getPeriodOfDay()}\n          </ListSubheader>\n        </GridListTile>\n        {vidNames.map((vidName) => (\n          <GridListTile key={vidName} className={classes.videoTile}\n            onClick={(event) => handleTileClick(event, vidName)}\n          >\n            <img src={getVideoThumbnailSrc(vidName)} alt={`${vidName} video thumbnail`}/>\n            <GridListTileBar\n              title={vidName}\n            //   subtitle={<span>by: {index}</span>}\n            //   actionIcon={\n            //     <IconButton aria-label={`info about`} className={classes.icon}>\n            //     </IconButton>\n            //   }\n            />\n          </GridListTile>\n        ))}\n      </GridList>\n    </div>\n  );\n}\n","import React from \"react\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n// import Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\n// import { FormattedMessage } from 'react-intl';\n// import { LOCALE_OPTIONS } from '../i18n/locale-settings';\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        backgroundColor: 'black',\n        zIndex: 1201\n    },\n    appTitle: {\n        fontFamily: 'Codystar',\n        cursive: true,\n        fontSize: '1.2em'\n    }\n}));\n\nfunction Navbar({ showOverlay }) {\n    const classes = useStyles();\n\n    const handleOnChannelsClicked = (_) => {\n        showOverlay();\n    }\n\n    return (\n        <AppBar position=\"fixed\" className={classes.appBar}>\n            <Toolbar>\n                <Button color=\"inherit\" className={classes.appTitle} onClick={handleOnChannelsClicked}>\n                    Mood for Study\n                </Button>\n                {/* <div style={{ flexGrow: 1 }}></div> */}\n                {/* <Button color=\"inherit\" onClick={() => dispatch(setLocale(LOCALE_OPTIONS.zh))}>中文</Button>\n                <Button color=\"inherit\" onClick={() => dispatch(setLocale(LOCALE_OPTIONS.en))}>English</Button> */}\n            </Toolbar>\n        </AppBar>\n    );\n}\n\nexport default Navbar;","import { useState, useLayoutEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nimport { getVideoSrc } from './videos';\nimport Overlay from './components/Overlay'; \nimport Navbar from './components/Navbar';\n\n// TODO: change font family according to different videos\n\nconst useStyles = makeStyles((theme) => ({\n  app: {\n    height: '100vh',\n    backgroundColor: 'black'\n  },\n  container: {\n    margin: 0,\n    padding: 0,\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  videoPlayer: {\n    width: '100vw',\n    height: '16vw'\n    // height: window.innerWidth * 9 / 16,\n    // pointerEvents: 'none'\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  // const [playerHeight, setPlayerHeight] = useState(window.innerWidth);\n  const [overlay, setOverlay] = useState(true);\n  const [video, setVideo] = useState('lofi-girl');\n  let vidSrc = getVideoSrc(video);\n\n  const switchChannel = (name) => {\n    setVideo(name);\n  };\n\n  const showOverlay = (val) => {\n    setOverlay(val);\n  };\n\n  return (\n    <div className={classes.app}>\n      { overlay ?\n        <Overlay hideOverlay={() => showOverlay(false)} switchChannel={switchChannel}/> :\n        <Navbar showOverlay={() => showOverlay(true)}/>\n      }\n      <Container className={classes.container}>\n        <div className={classes.appBarSpacer} />\n        <iframe className={classes.videoPlayer} src={vidSrc} title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}