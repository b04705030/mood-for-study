{"version":3,"sources":["videos.js","components/Overlay.js","components/Navbar.js","components/AspectRatio.js","components/YoutubePlayer.js","App.js","index.js"],"names":["VIDEO_IDS","getPeriodOfDay","currentHour","Date","getHours","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","opacity","position","top","bottom","left","right","zIndex","gridList","width","height","paddingTop","icon","color","subHeader","textAlign","fontSize","fontFamily","cursive","pointerEvents","videoTile","cursor","Overlay","hideOverlay","switchChannel","currentVideo","classes","vidNames","Object","keys","className","onClick","GridList","cellHeight","cols","GridListTile","style","ListSubheader","component","map","vidName","event","_","handleTileClick","src","videoName","alt","GridListTileBar","title","actionIcon","IconButton","actionPosition","appBar","appTitle","Navbar","showOverlay","AppBar","Toolbar","Button","OuterWrapper","styled","div","props","ratio","InnerWrapper","AspectRatio","children","YoutubePlayer","videoSrc","frameBorder","allow","allowFullScreen","app","container","margin","padding","appBarSpacer","mixins","toolbar","videoPlayer","App","useState","overlay","setOverlay","video","setVideo","val","name","Container","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3252971.chunk.js","sourcesContent":["export const VIDEO_IDS = {\n    'lofi-girl': '5qap5aO4i9A',\n    'tokyo-cafe': '6uddGul0oAc',\n    'space': 'qt_urUz42vI',\n    'fireplace-thunderstorm': '3sL0omwElxw',\n    'forest': 'xNN7iTA57jM',\n};\n\nexport const getVideoThumbnailSrc = (videoName) => {\n    return `https://img.youtube.com/vi/${VIDEO_IDS[videoName]}/hqdefault.jpg`;\n}; // mqdefault: 320px, hqdefault: 480px, sddefault: 640px\n\nexport const getVideoSrc = (videoName) => {\n    return `https://www.youtube.com/embed/${VIDEO_IDS[videoName]}?controls=1&autoplay=1&disablekb=0&modestbranding=1&rel=0&loop=1`;\n};","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport IconButton from '@material-ui/core/IconButton';\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\n\nimport { VIDEO_IDS, getVideoThumbnailSrc } from '../videos';\n\n\nconst getPeriodOfDay = () => {\n  const currentDate = new Date();\n  const currentHour = currentDate.getHours();\n  if (currentHour >= 4 && currentHour < 12) { return \"morning\"; }\n  else if (currentHour >= 12 && currentHour < 18) { return \"afternoon\"; }\n  else { return \"night\"; }\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: 'black',\n    opacity: 0.95,\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    zIndex: 10\n  },\n  gridList: {\n    width: '80vw',\n    height: '80vh',\n    paddingTop: '10vh'\n  },\n  icon: {\n    color: 'rgba(255, 255, 255, 0.54)',\n  },\n  subHeader: {\n      textAlign: 'center',\n      color: 'white',\n      fontSize: '2em',\n      fontFamily: 'Codystar',\n      cursive: true,\n      pointerEvents: 'none'\n  },\n  videoTile: {\n    '&:hover': {\n        cursor: 'pointer'\n    }\n  }\n}));\n\nexport default function Overlay({ hideOverlay, switchChannel, currentVideo }) {\n  const classes = useStyles();\n  const vidNames = Object.keys(VIDEO_IDS);\n\n  const handleTileClick = (_, vidName) => {\n    switchChannel(vidName);\n    hideOverlay();\n  };\n\n  return (\n    <div className={classes.root} onClick={hideOverlay}>\n      <GridList cellHeight={180} className={classes.gridList} cols={2}>\n        <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\n          <ListSubheader className={classes.subHeader} component=\"div\">\n            Set the mood for the {getPeriodOfDay()}\n          </ListSubheader>\n        </GridListTile>\n        {vidNames.map((vidName) => (\n          <GridListTile key={vidName} className={classes.videoTile}\n            onClick={(event) => handleTileClick(event, vidName)}\n          >\n            <img src={getVideoThumbnailSrc(vidName)} alt={`${vidName} video thumbnail`}/>\n            <GridListTileBar\n              title={vidName}\n            //   subtitle={<span>by: {index}</span>}\n              actionIcon={\n                vidName === currentVideo ?\n                <IconButton>\n                  <EqualizerIcon style={{ color: 'white' }}/>\n                </IconButton>\n                 : \"\"\n              }\n              actionPosition=\"left\"\n            />\n          </GridListTile>\n        ))}\n      </GridList>\n    </div>\n  );\n}\n","import React from \"react\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n// import Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\n// import { FormattedMessage } from 'react-intl';\n// import { LOCALE_OPTIONS } from '../i18n/locale-settings';\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        backgroundColor: 'black',\n        zIndex: 1201\n    },\n    appTitle: {\n        fontFamily: 'Codystar',\n        cursive: true,\n        fontSize: '1.2em'\n    }\n}));\n\nfunction Navbar({ showOverlay }) {\n    const classes = useStyles();\n\n    const handleOnChannelsClicked = (_) => {\n        showOverlay();\n    }\n\n    return (\n        <AppBar position=\"fixed\" className={classes.appBar}>\n            <Toolbar>\n                <Button color=\"inherit\" className={classes.appTitle} onClick={handleOnChannelsClicked}>\n                    Mood for Study\n                </Button>\n                {/* <div style={{ flexGrow: 1 }}></div> */}\n                {/* <Button color=\"inherit\" onClick={() => dispatch(setLocale(LOCALE_OPTIONS.zh))}>中文</Button>\n                <Button color=\"inherit\" onClick={() => dispatch(setLocale(LOCALE_OPTIONS.en))}>English</Button> */}\n            </Toolbar>\n        </AppBar>\n    );\n}\n\nexport default Navbar;","import styled from 'styled-components';\n\nconst OuterWrapper = styled.div`\n  position: relative;\n  width: 100%;\n  height: 0;\n  /**\n   * For human readability, the ratio is expressed as\n   * width / height, so we need to invert it.\n   */\n  padding-bottom: ${props => (1 / props.ratio) * 100}%;\n`\n\nconst InnerWrapper = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`\n\nconst AspectRatio = (props) => {\n    return (\n        <OuterWrapper ratio={props.ratio}>\n            <InnerWrapper>\n                {props.children}\n            </InnerWrapper>\n        </OuterWrapper>\n    )\n};\n\nexport default AspectRatio;","import AspectRatio from './AspectRatio';\n\nconst YoutubePlayer = (props) => {\n    return (\n        <AspectRatio ratio={16/9}>\n            <iframe width=\"100%\" height=\"100%\" src={props.videoSrc} title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n        </AspectRatio>\n    )\n};\n\nexport default YoutubePlayer;","import { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nimport { getVideoSrc } from './videos';\nimport Overlay from './components/Overlay'; \nimport Navbar from './components/Navbar';\nimport YoutubePlayer from './components/YoutubePlayer';\n\n// TODO: change font family according to different videos\n\nconst useStyles = makeStyles((theme) => ({\n  app: {\n    height: '100vh',\n    backgroundColor: 'black'\n  },\n  container: {\n    margin: 0,\n    padding: 0,\n    // paddingTop: theme.spacing(4),\n    // paddingBottom: theme.spacing(4),\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  videoPlayer: {\n    // width: props => props.windowSize.width,\n    // height: '16vw'\n    // height: ({windowSize}) => windowSize * 9 / 16,\n    // pointerEvents: 'none'\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [overlay, setOverlay] = useState(true);\n  const [video, setVideo] = useState('lofi-girl');\n\n  const switchChannel = (name) => {\n    setVideo(name);\n  };\n\n  const showOverlay = (val) => {\n    setOverlay(val);\n  };\n\n  return (\n    <div className={classes.app}>\n      { overlay ?\n        <Overlay hideOverlay={() => showOverlay(false)} switchChannel={switchChannel} currentVideo={video}/> :\n        <Navbar showOverlay={() => showOverlay(true)}/>\n      }\n      <Container className={classes.container}>\n        <div className={classes.appBarSpacer} />\n        <YoutubePlayer videoSrc={getVideoSrc(video)} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}